# puts "Exponential Decomposition Formula"
# puts "-----------------------------------------------------------------------------"
# puts "Correlation for Logarithm and Exponent"
# puts
# puts " Correlation  |        Logarithm       |       Exponent"
# puts "--------------+------------------------+------------------------"
# puts "   Radix      |    Complement with x   |        gcd-lcm "
# puts "   NN-int     |          floor         |        ceiling "
# puts "  Formula     |   Reso & Decomp-rate   |    Divide & Modulo "
# puts " Have Natural |       (Nothing)        |      Coefficient "
# puts "Have Powerroot| negative x of log10(z) |       (nothing)"
# puts "-----------------------------------------------------------------------------"
# puts ""

##### exp_pv #####

# Primary value is 0 < x < 2 instead of normalized 0 < x < 1
# (It can't get a solution)

## Series Expansion
# def exp_ser(z, n)
#   s = 1.0
#   for i in 1..n do
#     s += (z / i)
#     z *= z
#   end
#   s
# end

# N = 8
# 
# puts "Series Expansion (exp):"
# puts "ser(0.5) = #{exp_ser(0.5,N)}"
# puts "exp(0.5) = #{Math.exp(0.5)}"
# puts "error = #{exp_ser(0.5,N)-Math.exp(0.5)}"
# puts

# puts "error:"
# pp (0..100).map{|i| x = i / 100.0; [x, exp_ser(x,N) - Math.exp(x)]}

## Continued Fraction (deform)
# def exp2fr(fra)
#   a = fra; b = 2.0; s = 0.0;
#   loop do
#     a = a * a; b = b * 0.5;
#     if (a + b) >= 2.0
#       s = s + b; a = a / 2.0;
#     end
#     unless b >= Float::EPSILON then break; end
#   end
#   s
# end
# 
# pp (0..200).map{|i| x = i / 100.0; [x, exp2fr(x)]}

##=> (sqrt(2) <= x <= 2.0)
##=>  [1.42, 1.0117818594599146],
##=>  [1.43, 1.0320302940073292],
##=>  [1.44, 1.0521376233351751],
##=>  [1.45, 1.0721058004804194],
##=>  [1.46, 1.0919367382105847],
##=>  [1.47, 1.1116323101232792],
##=>  [1.48, 1.1311943517084502],
##=>  [1.49, 1.1506246613748736],
##=>  [1.5, 1.1699250014423122],
##=>  [1.51, 1.1890970991007084],
##=>  [1.52, 1.25],
##=>  [1.53, 1.25],
##=>  [1.54, 1.25],
##=>  [1.55, 1.264536430999026],
##=>  [1.56, 1.2830920581750473],
##=>  [1.57, 1.5],
##=>  [1.58, 1.5],
##=>  [1.59, 1.5],
##=>  [1.6, 1.5],
##=>  [1.61, 1.5],
##=>  [1.62, 1.5],
##=>  [1.63, 1.5],
##=>  [1.64, 1.5],
##=>  [1.65, 1.5],
##=>  [1.66, 1.5],
##=>  [1.67, 1.5],
##=>  [1.68, 1.5],
##=>  [1.69, 1.5140464930149191],
##=>  [1.7, 1.53125],
##=>  [1.71, 1.5479926502223462],
##=>  [1.72, 1.5648171298547462],
##=>  [1.73, 1.5815440757239998],
##=>  [1.74, 1.5981746121480072],
##=>  [1.75, 1.625],
##=>  [1.76, 1.631150857725145],
##=>  [1.77, 1.6474987206165457],
##=>  [1.78, 1.6637544823833461],
##=>  [1.79, 1.6799191749790634],
##=>  [1.8, 1.6959938131099002],
##=>  [1.81, 1.75],
##=>  [1.82, 1.75],
##=>  [1.83, 1.75],
##=>  [1.84, 1.7594115325645765],
##=>  [1.85, 1.775050541483175],
##=>  [1.86, 1.7906052426666137],
##=>  [1.87, 1.806076540225824],
##=>  [1.88, 1.8214653238058252],
##=>  [1.89, 1.8367724688926956],
##=>  [1.9, 1.851998837112446],
##=>  [1.91, 1.875],
##=>  [1.92, 1.882212621892863],
##=>  [1.93, 1.8972016949867112],
##=>  [1.94, 1.912113304824806],
##=>  [1.95, 1.9269482479497717],
##=>  [1.96, 1.9417073086809669],
##=>  [1.97, 1.956391259363303],
##=>  [1.98, 1.9710008606097698],
##=>  [1.99, 1.9855368615378484],
##=>  [2.0, 2.0]]
## NOTE: ...The behavior is correct but its looking for an exponent from the logarithm;

## Inverse Element of antilogarithm,  Wolfram code: Plot[2^x - (x + 1), {x, 0, 1}]
## Error of least square x, Wolfram code: Plot[2^x - (x x + 1), {x, 0, 1}]

## pearson's form of the incomplete gamma function
## Do create the Inverse Element of Antilogarithm,  Wolfram code: Plot[2^x - (x + 1), {x, 0, 1}]
# def alog(fra)
#   2 ** fra - (1 + fra)
# end
# pp (0..100).map{|i| x = i / 100.0; [x, alog(x)]}
## See Wolfram code.

## Do create the Error of least square x, Wolfram code: Plot[2^x - (x x + 1), {x, 0, 1}]
# def enx_lsa(fra)
#   2 ** fra - (1 + fra * fra)
# end
# pp (0..100).map{|i| x = i / 100.0; [x, enx_lsa(x)]}
## See Wolfram code.

# def expnx_c(fra)
#   a = fra * fra; b = 1.0; s = 1.0;
#   loop do
#     b = b / 2
#     if a + b >= 2.0
#       s = s + b; 
#       a = a / 2.0;
#     elsif a + b <= 5.0
#       a = a * b;
#     end
#     unless b >= Float::EPSILON then break; end
#   end
#   s
# end
# pp (0..100).map{|i| x = i / 100.0; [x, expnx_c(x)]}
# #=> [[0.0, 1.0],
# #=>  [0.01, 1.0],
# #=>  [0.02, 1.0],
# #=>  [0.03, 1.0],
# #=>  [0.04, 1.0],
# #=>  [0.05, 1.0],
# #=>  :
# #=>  :

# Normalized by exp2(-1)=1/2, exp2(0)=1, exp2(1)=2
# def expnx_c(fra)
#   a = fra * fra; b = 1.0; s = 1.0;
#   loop do
#     b = b / 2
#     printf("%*.*f %*.*f %*.*f\n",
#            Float::DIG, Float::DIG, a,
#            Float::DIG, Float::DIG, b,
#            Float::DIG, Float::DIG, s)
#     if a + b <= 0.5 then s = s + b; a = a / 2.0; end
#     unless b >= Float::EPSILON then break; end
#   end
#   s
# end
# expnx_c(0.5)
# #=> 0.250000000000000 0.500000000000000 1.000000000000000
# #=> 0.250000000000000 0.250000000000000 1.000000000000000
# #=> 0.125000000000000 0.125000000000000 1.250000000000000
# #=> 0.062500000000000 0.062500000000000 1.375000000000000
# #=> 0.031250000000000 0.031250000000000 1.437500000000000
# #=> 0.015625000000000 0.015625000000000 1.468750000000000
# #=> 0.007812500000000 0.007812500000000 1.484375000000000
# #=> 0.003906250000000 0.003906250000000 1.492187500000000
# #=> 0.001953125000000 0.001953125000000 1.496093750000000
# #=> 0.000976562500000 0.000976562500000 1.498046875000000
# #=> 0.000488281250000 0.000488281250000 1.499023437500000
# #=> 0.000244140625000 0.000244140625000 1.499511718750000
# #=> 0.000122070312500 0.000122070312500 1.499755859375000
# #=> 0.000061035156250 0.000061035156250 1.499877929687500
# #=> 0.000030517578125 0.000030517578125 1.499938964843750
# #=> 0.000015258789062 0.000015258789062 1.499969482421875
# #=> 0.000007629394531 0.000007629394531 1.499984741210938
# #=> 0.000003814697266 0.000003814697266 1.499992370605469
# #=> 0.000001907348633 0.000001907348633 1.499996185302734
# #=> 0.000000953674316 0.000000953674316 1.499998092651367
# #=> 0.000000476837158 0.000000476837158 1.499999046325684
# #=> 0.000000238418579 0.000000238418579 1.499999523162842
# #=> 0.000000119209290 0.000000119209290 1.499999761581421
# #=> 0.000000059604645 0.000000059604645 1.499999880790710
# #=> 0.000000029802322 0.000000029802322 1.499999940395355
# #=> 0.000000014901161 0.000000014901161 1.499999970197678
# #=> 0.000000007450581 0.000000007450581 1.499999985098839
# #=> 0.000000003725290 0.000000003725290 1.499999992549419
# #=> 0.000000001862645 0.000000001862645 1.499999996274710
# #=> 0.000000000931323 0.000000000931323 1.499999998137355
# #=> 0.000000000465661 0.000000000465661 1.499999999068677
# #=> 0.000000000232831 0.000000000232831 1.499999999534339
# #=> 0.000000000116415 0.000000000116415 1.499999999767169
# #=> 0.000000000058208 0.000000000058208 1.499999999883585
# #=> 0.000000000029104 0.000000000029104 1.499999999941792
# #=> 0.000000000014552 0.000000000014552 1.499999999970896
# #=> 0.000000000007276 0.000000000007276 1.499999999985448
# #=> 0.000000000003638 0.000000000003638 1.499999999992724
# #=> 0.000000000001819 0.000000000001819 1.499999999996362
# #=> 0.000000000000909 0.000000000000909 1.499999999998181
# #=> 0.000000000000455 0.000000000000455 1.499999999999091
# #=> 0.000000000000227 0.000000000000227 1.499999999999545
# #=> 0.000000000000114 0.000000000000114 1.499999999999773
# #=> 0.000000000000057 0.000000000000057 1.499999999999886
# #=> 0.000000000000028 0.000000000000028 1.499999999999943
# #=> 0.000000000000014 0.000000000000014 1.499999999999972
# #=> 0.000000000000007 0.000000000000007 1.499999999999986
# #=> 0.000000000000004 0.000000000000004 1.499999999999993
# #=> 0.000000000000002 0.000000000000002 1.499999999999996
# #=> 0.000000000000001 0.000000000000001 1.499999999999998
# #=> 0.000000000000000 0.000000000000000 1.499999999999999
# #=> 0.000000000000000 0.000000000000000 1.500000000000000
# #=> 0.000000000000000 0.000000000000000 1.500000000000000


# Exponential Decomposition Integrals, for Wolfram Alpha
# 2^x == 2*x, x=1..2
# Plot[2^x - 2*x, x=1..2]
# plot[log2(1+x) - x, x=0..1]
# plot[log2(1+x) - (sqrt(1+3*x)-1), x=0..1]

# t1 = (0..10).step(1).map{|x| x = x/10.0; Math.exp(x * Math.log(2))}
# t2 = (10..20).step(1).map{|x| x = x/10.0; Math.exp(x * Math.log(2))}
# t3 = (20..40).step(2).map{|x| x = x/10.0; Math.exp(x * Math.log(2))}
# t4 = (40..80).step(4).map{|x| x = x/10.0; Math.exp(x * Math.log(2))}
# 
# puts "Exponent table"
# puts "t1: exp2(0.0 <= x <= 1.0)"
# pp t1
# puts "t2: exp2(1.0 <= x <= 2.0)"
# pp t2
# puts "t3: exp2(2.0 <= x <= 4.0)"
# pp t3
# puts "t4: exp2(4.0 <= x <= 8.0)"
# pp t4
# 
# puts
# 
# puts "Each divmod of exponent"
# print "t1 (1): "
# p t1.map{|x| 1.divmod(x)}
# print "t2 (2): "
# p t2.map{|x| 2.divmod(x)}
# print "t3 (4): "
# p t3.map{|x| 4.divmod(x)}
# print "t4 (16): "
# p t4.map{|x| 16.divmod(x)}
# 
# puts
# 
# puts "Power root $x^{-exp}$"
# puts "t1 (sqrt(x)), (base): "
# pp t1.map{|x| Math.sqrt(x)}
# puts "t2 (1/2): "
# y = 0.5
# pp t2.map{|x| x ** y}
# puts "t3 (1/4): "
# y = 0.25
# pp t3.map{|x| x ** y}
# puts "t4 (1/8): "
# y = 0.125
# pp t4.map{|x| x ** y}
# 
# puts
# 
# SQRT2 = Math.sqrt(2)
# 
# puts "Power root of 0 <= x <= 2"
# puts "in 0 <= x <= 1"
# pp (0..10).map{|x| x /= 10.0; SQRT2 ** x}
# puts "in 1 <= x <= 2"
# pp (10..20).map{|x| x /= 10.0; SQRT2 ** x}
# 
# puts
# 
# puts "Error between power-root 0 <= x <= 2 and exp2 0 <= x <= 1"
# pp (0..20).step(2).map{|x| x /= 10.0; SQRT2 ** x}.zip(t1).map{|x, y| x - y}
# 
# puts
# 
# puts "Calculation power table"
# gcd = 2.0; lcm = 1.0; _t1 = 0.5; _t2 = 0.5 # base exp, x > 2
# for i in 1..4 do
#   puts "exp(#{i}) = gcd: #{gcd}, lcm: #{lcm}"
#   gcd = (1 / _t1) / _t1
#   _t1 *= _t1
#   lcm = 1 / _t2
#   _t2 *= _t2
# end
# 
# puts
# puts "The power root of logarithm, its hidden into negative log10(z)."
# puts "It is hidden by the cube root, so it is not usually seen as an rational number."
# 
# # logarithmic power root
# def logroot(x)
#   1.0 / (x + 2) + 1
# end
# 
# puts "Log-root"
# pp (-10..10).map{|x| [x, logroot(x)]}
# 
# puts
# puts "Where, x's root is -3."
# puts "Log-Root minus 3 is "
# puts
# 
# # logarithmic power root minus 3
# def logrootm3(x)
#   1.0 / (x - 1) + 1
# end
# 
# puts "Log-root minus 3"
# pp (-10..10).map{|x| [x, logrootm3(x)]}
# 
# puts
# puts "sqrt(2) is all of real number's root."
# puts "Solve of sqrt(2) = logroot(x) is 1 - sqrt(2)."
# puts "Therefore, exp2(x) == 2^x is true."
# 
# puts
# 
# def pow2tab(sign = false)
#   gcd = 2.0; lcm = 1.0; t1 = 0.5; t2 = 0.5; exp = 1
#   while gcd != Float::INFINITY
#     if sign == false
#       puts "gcd: #{gcd}, lcm: #{lcm}, exp: #{exp}"
#     else
#       puts "gcd: #{1/gcd}, lcm: #{1/lcm}, exp: #{-exp}"
#     end
#     gcd = (1 / t1) / t1
#     t1 *= t1
#     lcm = 1 / t2
#     t2 *= t2
#     exp <<= 1
#   end
# end
# 
# puts "gcd-lcm table for pow2 (base: exp(0), 0.0~1.0):"
# pow2tab
# puts "has sign"
# pow2tab(true)

##### ceiling matrix #####

# [指数関数による天井行列式]
# 掛け算・割り算に足し算・引き算の式を与えたとしてある指数・対数は、四則演算のもっと底にある学問である。
# あらゆる初等学問からいいところだけを集めて折衷したかのようであり、この公式は一言で応用例とは言いがたい何かがある。

# Ceiling Matrix on Wolfram Code:
# https://www.wolframalpha.com/input/?i=3dplot+%5B2%5Ex%2C+x%3D0..1%5D

# ++++ Characteristics of exponential functions ++++
# Approximation: Square root
# Rational function approximation: Sum of squares
# Integral: Powers of 2
# Integral formula: Convolutional integrals
# Decomposition: Power sum (nth simultaneous equations)
# Primary value: Inverse element of antilogarithm
# Coefficient: Constant term (movable)
# Determinants: Multiply (baseless inequality)
# Element's integral formula: $2^{x}\neg(x+1)\,\rm{But}\,0<x<1$
# Integral type: Antiderivative: $\int{2^x}dx=\frac{2^x}{\ln(2)}+\rm{Constant.}$
# ++++++++++++++++++++++++++++++++++++++++++++++++++

# LOG2 = Math.log(2)
# def exp2fr(fra)
#   a = fra; b = 1.0; s = 1.0;
#   loop do
#     b = 0.5 * b;
# printf("%15.15f %15.15f ", a, b)
#     if a / LOG2 >= LOG2
#       s = a / LOG2;
# printf("%15.15f", s)
#     end
# puts
#     a = (a + b) * LOG2
#     unless b >= Float::EPSILON then break; end
#   end
# end
# 
# exp2fr(0.5)
# #=> 0.500000000000000 0.500000000000000 1.500000000000000
# #=> 0.846573590279973 0.250000000000000 1.750000000000000
# #=> 1.019860385419959 0.125000000000000 1.875000000000000
# #=> 1.106503782989952 0.062500000000000 1.937500000000000
# #=> 1.149825481774949 0.031250000000000 1.968750000000000
# #=> 1.171486331167447 0.015625000000000 1.984375000000000
# #=> 1.182316755863696 0.007812500000000 1.992187500000000
# #=> 1.187731968211821 0.003906250000000 1.996093750000000
# #=> 1.190439574385883 0.001953125000000 1.998046875000000
# #=> 1.191793377472914 0.000976562500000 1.999023437500000
# #=> 1.192470279016430 0.000488281250000 1.999511718750000
# #=> 1.192808729788188 0.000244140625000 1.999755859375000
# #=> 1.192977955174067 0.000122070312500 1.999877929687500
# #=> 1.193062567867006 0.000061035156250 1.999938964843750
# #=> 1.193104874213476 0.000030517578125 1.999969482421875
# #=> 1.193126027386711 0.000015258789062 1.999984741210938
# #=> 1.193136603973328 0.000007629394531 1.999992370605469
# #=> 1.193141892266637 0.000003814697266 1.999996185302734
# #=> 1.193144536413292 0.000001907348633 1.999998092651367
# #=> 1.193145858486619 0.000000953674316 1.999999046325684
# #=> 1.193146519523283 0.000000476837158 1.999999523162842
# #=> 1.193146850041614 0.000000238418579 1.999999761581421
# #=> 1.193147015300780 0.000000119209290 1.999999880790710
# #=> 1.193147097930363 0.000000059604645 1.999999940395355
# #=> 1.193147139245155 0.000000029802322 1.999999970197678
# #=> 1.193147159902551 0.000000014901161 1.999999985098839
# #=> 1.193147170231249 0.000000007450581 1.999999992549419
# #=> 1.193147175395598 0.000000003725290 1.999999996274710
# #=> 1.193147177977772 0.000000001862645 1.999999998137355
# #=> 1.193147179268859 0.000000000931323 1.999999999068677
# #=> 1.193147179914403 0.000000000465661 1.999999999534339
# #=> 1.193147180237175 0.000000000232831 1.999999999767169
# #=> 1.193147180398560 0.000000000116415 1.999999999883585
# #=> 1.193147180479253 0.000000000058208 1.999999999941792
# #=> 1.193147180519600 0.000000000029104 1.999999999970896
# #=> 1.193147180539773 0.000000000014552 1.999999999985448
# #=> 1.193147180549859 0.000000000007276 1.999999999992724
# #=> 1.193147180554903 0.000000000003638 1.999999999996362
# #=> 1.193147180557424 0.000000000001819 1.999999999998181
# #=> 1.193147180558685 0.000000000000909 1.999999999999091
# #=> 1.193147180559316 0.000000000000455 1.999999999999545
# #=> 1.193147180559631 0.000000000000227 1.999999999999773
# #=> 1.193147180559788 0.000000000000114 1.999999999999886
# #=> 1.193147180559867 0.000000000000057 1.999999999999943
# #=> 1.193147180559907 0.000000000000028 1.999999999999972
# #=> 1.193147180559926 0.000000000000014 1.999999999999986
# #=> 1.193147180559936 0.000000000000007 1.999999999999993
# #=> 1.193147180559941 0.000000000000004 1.999999999999996
# #=> 1.193147180559943 0.000000000000002 1.999999999999998
# #=> 1.193147180559944 0.000000000000001 1.999999999999999
# #=> 1.193147180559945 0.000000000000000 2.000000000000000
# #=> 1.193147180559945 0.000000000000000 2.000000000000000
# #=> 1.193147180559945 0.000000000000000 2.000000000000000

# SQRT2M1 = Math.sqrt(2) - 1
# def exp2fr(fra)
#   a = fra; b = 1.0; s = 1.0;
#   loop do
#     b = 0.5 * b;
# printf("%15.15f %15.15f ", a, b)
#     if a / SQRT2M1 >= SQRT2M1
#       s = a / SQRT2M1;
# printf("%15.15f", s)
#     end
# puts
#     a = (a + b) * SQRT2M1
#     unless b >= Float::EPSILON then break; end
#   end
# end
# 
# exp2fr(0.5)
# #=> 0.500000000000000 0.500000000000000 1.207106781186547
# #=> 0.414213562373095 0.250000000000000 1.000000000000000
# #=> 0.275126265847084 0.125000000000000 0.664213562373095
# #=> 0.165737725975565 0.062500000000000
# #=> 0.094539161544273 0.031250000000000
# #=> 0.052103576711178 0.015625000000000
# #=> 0.028054095033996 0.007812500000000
# #=> 0.014856430099225 0.003906250000000
# #=> 0.007771756563567 0.001953125000000
# #=> 0.004028177836101 0.000976562500000
# #=> 0.002073031323369 0.000488281250000
# #=> 0.001060930405366 0.000244140625000
# #=> 0.000540578120638 0.000122070312500
# #=> 0.000274477968091 0.000061035156250
# #=> 0.000138974086456 0.000030517578125
# #=> 0.000070205746179 0.000015258789062
# #=> 0.000035400569599 0.000007629394531
# #=> 0.000017823594731 0.000003814697266
# #=> 0.000008962874012 0.000001907348633
# #=> 0.000004502593645 0.000000953674316
# #=> 0.000002260060190 0.000000476837158
# #=> 0.000001133660000 0.000000238418579
# #=> 0.000000568333556 0.000000119209290
# #=> 0.000000284789571 0.000000059604645
# #=> 0.000000142652755 0.000000029802322
# #=> 0.000000071433232 0.000000014901161
# #=> 0.000000035760877 0.000000007450581
# #=> 0.000000017898772 0.000000003725290
# #=> 0.000000008956980 0.000000001862645
# #=> 0.000000004481635 0.000000000931323
# #=> 0.000000002242121 0.000000000465661
# #=> 0.000000001121600 0.000000000232831
# #=> 0.000000000561024 0.000000000116415
# #=> 0.000000000280604 0.000000000058208
# #=> 0.000000000140341 0.000000000029104
# #=> 0.000000000070186 0.000000000014552
# #=> 0.000000000035100 0.000000000007276
# #=> 0.000000000017553 0.000000000003638
# #=> 0.000000000008777 0.000000000001819
# #=> 0.000000000004389 0.000000000000909
# #=> 0.000000000002195 0.000000000000455
# #=> 0.000000000001097 0.000000000000227
# #=> 0.000000000000549 0.000000000000114
# #=> 0.000000000000274 0.000000000000057
# #=> 0.000000000000137 0.000000000000028
# #=> 0.000000000000069 0.000000000000014
# #=> 0.000000000000034 0.000000000000007
# #=> 0.000000000000017 0.000000000000004
# #=> 0.000000000000009 0.000000000000002
# #=> 0.000000000000004 0.000000000000001
# #=> 0.000000000000002 0.000000000000000
# #=> 0.000000000000001 0.000000000000000
# #=> 0.000000000000001 0.000000000000000
# # 2^0.5の定数項0.25にヒット。このときsは1.0、aは解から-1を引いた値が送出される
# # 指数法則で逆元を得ることはできない。ありとあらゆる自然数和には解がないからである

# バリアント。解-0.5
# SQRT2M1 = Math.sqrt(2) - 1
# def exp2fr(fra)
#   a = fra; b = 1.0; s = 1.0;
#   loop do
#     b = 0.5 * b; a = a / SQRT2M1;
# printf("%15.15f %15.15f ", a, b)
#     a = (a + b) * SQRT2M1
# printf("%15.15f", a)
# puts
# 
#     unless b >= Float::EPSILON then break; end
#   end
#   p a
# end
# 
# exp2fr(0.5)
# #=> 1.207106781186547 0.500000000000000 0.707106781186548
# #=> 1.707106781186547 0.250000000000000 0.810660171779821
# #=> 1.957106781186547 0.125000000000000 0.862436867076458
# #=> 2.082106781186547 0.062500000000000 0.888325214724777
# #=> 2.144606781186547 0.031250000000000 0.901269388548936
# #=> 2.175856781186547 0.015625000000000 0.907741475461015
# #=> 2.191481781186547 0.007812500000000 0.910977518917055
# #=> 2.199294281186547 0.003906250000000 0.912595540645075
# #=> 2.203200531186547 0.001953125000000 0.913404551509085
# #=> 2.205153656186547 0.000976562500000 0.913809056941090
# #=> 2.206130218686547 0.000488281250000 0.914011309657093
# #=> 2.206618499936547 0.000244140625000 0.914112436015094
# #=> 2.206862640561547 0.000122070312500 0.914162999194094
# #=> 2.206984710874047 0.000061035156250 0.914188280783595
# #=> 2.207045746030297 0.000030517578125 0.914200921578345
# #=> 2.207076263608422 0.000015258789062 0.914207241975720
# #=> 2.207091522397485 0.000007629394531 0.914210402174408
# #=> 2.207099151792016 0.000003814697266 0.914211982273751
# #=> 2.207102966489281 0.000001907348633 0.914212772323423
# #=> 2.207104873837914 0.000000953674316 0.914213167348259
# #=> 2.207105827512231 0.000000476837158 0.914213364860677
# #=> 2.207106304349389 0.000000238418579 0.914213463616886
# #=> 2.207106542767968 0.000000119209290 0.914213512994991
# #=> 2.207106661977257 0.000000059604645 0.914213537684043
# #=> 2.207106721581902 0.000000029802322 0.914213550028569
# #=> 2.207106751384225 0.000000014901161 0.914213556200832
# #=> 2.207106766285386 0.000000007450581 0.914213559286964
# #=> 2.207106773735966 0.000000003725290 0.914213560830029
# #=> 2.207106777461257 0.000000001862645 0.914213561601562
# #=> 2.207106779323902 0.000000000931323 0.914213561987329
# #=> 2.207106780255224 0.000000000465661 0.914213562180212
# #=> 2.207106780720886 0.000000000232831 0.914213562276653
# #=> 2.207106780953716 0.000000000116415 0.914213562324874
# #=> 2.207106781070132 0.000000000058208 0.914213562348985
# #=> 2.207106781128339 0.000000000029104 0.914213562361040
# #=> 2.207106781157443 0.000000000014552 0.914213562367067
# #=> 2.207106781171995 0.000000000007276 0.914213562370081
# #=> 2.207106781179271 0.000000000003638 0.914213562371588
# #=> 2.207106781182909 0.000000000001819 0.914213562372342
# #=> 2.207106781184728 0.000000000000909 0.914213562372718
# #=> 2.207106781185638 0.000000000000455 0.914213562372907
# #=> 2.207106781186092 0.000000000000227 0.914213562373001
# #=> 2.207106781186320 0.000000000000114 0.914213562373048
# #=> 2.207106781186433 0.000000000000057 0.914213562373071
# #=> 2.207106781186490 0.000000000000028 0.914213562373083
# #=> 2.207106781186519 0.000000000000014 0.914213562373089
# #=> 2.207106781186533 0.000000000000007 0.914213562373092
# #=> 2.207106781186540 0.000000000000004 0.914213562373094
# #=> 2.207106781186543 0.000000000000002 0.914213562373094
# #=> 2.207106781186545 0.000000000000001 0.914213562373095
# #=> 2.207106781186546 0.000000000000000 0.914213562373095
# #=> 2.207106781186547 0.000000000000000 0.914213562373095
# #=> 2.207106781186547 0.000000000000000 0.914213562373095
# #=> 0.914213562373095

# # 0 < x < 1 から累乗根を求める
# SQRT2 = Math.sqrt(2)
# def pwrt(fra)
#   a = fra; b = 1.0; s = 0.0;
#   loop do
#     s = s + a / SQRT2
#     a = a / 2; b = b / 2;
#     unless b >= Float::EPSILON then break; end
#   end
#   s
# end
# 
# arr = [0.0, 0.125, 0.2, 0.25, 0.4, 0.5, 0.6, 0.75, 0.875, 1.0]
# pp arr.map{|x| xp = pwrt(x); [x, xp, xp * xp]}
# #=> [[0.0, 0.0, 0.0],
# #=>  [0.125, 0.17677669529663684, 0.031249999999999986],
# #=>  [0.2, 0.282842712474619, 0.08],
# #=>  [0.25, 0.3535533905932737, 0.12499999999999994],
# #=>  [0.4, 0.565685424949238, 0.32],
# #=>  [0.5, 0.7071067811865474, 0.4999999999999998],
# #=>  [0.6, 0.8485281374238568, 0.7199999999999996],
# #=>  [0.75, 1.060660171779821, 1.1249999999999993],
# #=>  [0.875, 1.237436867076458, 1.5312499999999996],
# #=>  [1.0, 1.4142135623730947, 1.9999999999999991]]

# # 0 < x < 1 の累乗根と定数項
# SQRT2 = Math.sqrt(2)
# def pwrt_c(fra)
#   a = fra; b = 1.0; c = 0.0; s = 0.0;
# printf("%-17s %-17s %-17s %-17s\n", "a", "b", "s", "c")
#   loop do
#     s = s + a / SQRT2
#     b = b / 2;
# printf("%15.15f %15.15f %15.15f ", a, b, s)
#     if c == 0.0 && fra > b
#       c = b
# printf("%15.15f", c)
#     end
# puts
#     a = a / 2; 
#     unless b >= Float::EPSILON then break; end
#   end
#   s
# end
# 
# pwrt_c(0.5)
# #=> a                 b                 s                 c
# #=> 0.500000000000000 0.500000000000000 0.353553390593274
# #=> 0.250000000000000 0.250000000000000 0.530330085889911 0.250000000000000
# #=> 0.125000000000000 0.125000000000000 0.618718433538229
# #=> 0.062500000000000 0.062500000000000 0.662912607362388
# #=> 0.031250000000000 0.031250000000000 0.685009694274468
# #=> 0.015625000000000 0.015625000000000 0.696058237730508
# #=> 0.007812500000000 0.007812500000000 0.701582509458528
# #=> 0.003906250000000 0.003906250000000 0.704344645322537
# #=> 0.001953125000000 0.001953125000000 0.705725713254542
# #=> 0.000976562500000 0.000976562500000 0.706416247220545
# #=> 0.000488281250000 0.000488281250000 0.706761514203546
# #=> 0.000244140625000 0.000244140625000 0.706934147695047
# #=> 0.000122070312500 0.000122070312500 0.707020464440797
# #=> 0.000061035156250 0.000061035156250 0.707063622813672
# #=> 0.000030517578125 0.000030517578125 0.707085202000110
# #=> 0.000015258789062 0.000015258789062 0.707095991593329
# #=> 0.000007629394531 0.000007629394531 0.707101386389938
# #=> 0.000003814697266 0.000003814697266 0.707104083788243
# #=> 0.000001907348633 0.000001907348633 0.707105432487395
# #=> 0.000000953674316 0.000000953674316 0.707106106836971
# #=> 0.000000476837158 0.000000476837158 0.707106444011759
# #=> 0.000000238418579 0.000000238418579 0.707106612599153
# #=> 0.000000119209290 0.000000119209290 0.707106696892850
# #=> 0.000000059604645 0.000000059604645 0.707106739039699
# #=> 0.000000029802322 0.000000029802322 0.707106760113123
# #=> 0.000000014901161 0.000000014901161 0.707106770649835
# #=> 0.000000007450581 0.000000007450581 0.707106775918191
# #=> 0.000000003725290 0.000000003725290 0.707106778552369
# #=> 0.000000001862645 0.000000001862645 0.707106779869458
# #=> 0.000000000931323 0.000000000931323 0.707106780528003
# #=> 0.000000000465661 0.000000000465661 0.707106780857275
# #=> 0.000000000232831 0.000000000232831 0.707106781021911
# #=> 0.000000000116415 0.000000000116415 0.707106781104229
# #=> 0.000000000058208 0.000000000058208 0.707106781145388
# #=> 0.000000000029104 0.000000000029104 0.707106781165968
# #=> 0.000000000014552 0.000000000014552 0.707106781176258
# #=> 0.000000000007276 0.000000000007276 0.707106781181403
# #=> 0.000000000003638 0.000000000003638 0.707106781183975
# #=> 0.000000000001819 0.000000000001819 0.707106781185261
# #=> 0.000000000000909 0.000000000000909 0.707106781185904
# #=> 0.000000000000455 0.000000000000455 0.707106781186226
# #=> 0.000000000000227 0.000000000000227 0.707106781186387
# #=> 0.000000000000114 0.000000000000114 0.707106781186467
# #=> 0.000000000000057 0.000000000000057 0.707106781186507
# #=> 0.000000000000028 0.000000000000028 0.707106781186527
# #=> 0.000000000000014 0.000000000000014 0.707106781186537
# #=> 0.000000000000007 0.000000000000007 0.707106781186542
# #=> 0.000000000000004 0.000000000000004 0.707106781186545
# #=> 0.000000000000002 0.000000000000002 0.707106781186546
# #=> 0.000000000000001 0.000000000000001 0.707106781186547
# #=> 0.000000000000000 0.000000000000000 0.707106781186547
# #=> 0.000000000000000 0.000000000000000 0.707106781186547
# #=> 0.000000000000000 0.000000000000000 0.707106781186547

# オマケ。行列の閉形式において主値である $\frac{1}{\ln(2)}$ 。
# 展開例では $\frac{1}{\int_{1}^{2}\frac{1}{t} dt}$ の定積分となり解は得られない。
# # ARCLOG2 = 1 / Math.log(2) #=> 1.442695040888963407359924681...
# LOG2 = Math.log(2)
# def pwrt_d(fra)
#   a = fra; b = 1.0; c = 0.0; s = 0.0;
# printf("%-17s %-17s %-17s %-17s\n", "a", "b", "s", "c")
#   loop do
#     s = s + a / LOG2
#     b = b / 2;
# printf("%15.15f %15.15f %15.15f ", a, b, s)
#     if c == 0.0 && fra > b
#       c = b
# printf("%15.15f", c)
#     end
# puts
#     a = a / 2; 
#     unless b >= Float::EPSILON then break; end
#   end
#   s
# end
# 
# pwrt_d(0.5)
# #=> a                 b                 s                 c
# #=> 0.500000000000000 0.500000000000000 0.721347520444482
# #=> 0.250000000000000 0.250000000000000 1.082021280666722 0.250000000000000
# #=> 0.125000000000000 0.125000000000000 1.262358160777843
# #=> 0.062500000000000 0.062500000000000 1.352526600833403
# #=> 0.031250000000000 0.031250000000000 1.397610820861183
# #=> 0.015625000000000 0.015625000000000 1.420152930875073
# #=> 0.007812500000000 0.007812500000000 1.431423985882018
# #=> 0.003906250000000 0.003906250000000 1.437059513385491
# #=> 0.001953125000000 0.001953125000000 1.439877277137227
# #=> 0.000976562500000 0.000976562500000 1.441286159013095
# #=> 0.000488281250000 0.000488281250000 1.441990599951029
# #=> 0.000244140625000 0.000244140625000 1.442342820419996
# #=> 0.000122070312500 0.000122070312500 1.442518930654480
# #=> 0.000061035156250 0.000061035156250 1.442606985771721
# #=> 0.000030517578125 0.000030517578125 1.442651013330342
# #=> 0.000015258789062 0.000015258789062 1.442673027109653
# #=> 0.000007629394531 0.000007629394531 1.442684033999308
# #=> 0.000003814697266 0.000003814697266 1.442689537444136
# #=> 0.000001907348633 0.000001907348633 1.442692289166549
# #=> 0.000000953674316 0.000000953674316 1.442693665027756
# #=> 0.000000476837158 0.000000476837158 1.442694352958360
# #=> 0.000000238418579 0.000000238418579 1.442694696923662
# #=> 0.000000119209290 0.000000119209290 1.442694868906312
# #=> 0.000000059604645 0.000000059604645 1.442694954897638
# #=> 0.000000029802322 0.000000029802322 1.442694997893301
# #=> 0.000000014901161 0.000000014901161 1.442695019391132
# #=> 0.000000007450581 0.000000007450581 1.442695030140048
# #=> 0.000000003725290 0.000000003725290 1.442695035514505
# #=> 0.000000001862645 0.000000001862645 1.442695038201734
# #=> 0.000000000931323 0.000000000931323 1.442695039545349
# #=> 0.000000000465661 0.000000000465661 1.442695040217156
# #=> 0.000000000232831 0.000000000232831 1.442695040553060
# #=> 0.000000000116415 0.000000000116415 1.442695040721012
# #=> 0.000000000058208 0.000000000058208 1.442695040804987
# #=> 0.000000000029104 0.000000000029104 1.442695040846975
# #=> 0.000000000014552 0.000000000014552 1.442695040867969
# #=> 0.000000000007276 0.000000000007276 1.442695040878466
# #=> 0.000000000003638 0.000000000003638 1.442695040883715
# #=> 0.000000000001819 0.000000000001819 1.442695040886339
# #=> 0.000000000000909 0.000000000000909 1.442695040887651
# #=> 0.000000000000455 0.000000000000455 1.442695040888307
# #=> 0.000000000000227 0.000000000000227 1.442695040888635
# #=> 0.000000000000114 0.000000000000114 1.442695040888799
# #=> 0.000000000000057 0.000000000000057 1.442695040888881
# #=> 0.000000000000028 0.000000000000028 1.442695040888922
# #=> 0.000000000000014 0.000000000000014 1.442695040888943
# #=> 0.000000000000007 0.000000000000007 1.442695040888953
# #=> 0.000000000000004 0.000000000000004 1.442695040888958
# #=> 0.000000000000002 0.000000000000002 1.442695040888961
# #=> 0.000000000000001 0.000000000000001 1.442695040888962
# #=> 0.000000000000000 0.000000000000000 1.442695040888963
# #=> 0.000000000000000 0.000000000000000 1.442695040888963
# #=> 0.000000000000000 0.000000000000000 1.442695040888963

## 定数項をチェックする
# def ct_check(fra)
#   b = 1.0; c = 0.0
#   loop do
#     b = b / 2.0
#     if (fra > b) then c = b; break; end
#     unless b >= Float::EPSILON then break; end
#   end
#   c
# end
# 
# arr = [0.0, 0.1, 0.2, 0.25, 0.4, 0.5, 0.6, 0.75, 1.0]
# arr.each{|x| p [x, ct_check(x)]}
# #=> [0.0, 0.0]
# #=> [0.1, 0.0625]
# #=> [0.2, 0.125]
# #=> [0.25, 0.125]
# #=> [0.4, 0.25]
# #=> [0.5, 0.25]
# #=> [0.6, 0.5]
# #=> [0.75, 0.5]
# #=> [1.0, 0.5]

# 定数項は変動しているため、次数はあるのかといえばそうでもない。次数があったとしても平面上では均等な値が予測される。
# ここで、行列式に逆ラプラス変換を導入する。
# $\sqrt{t}$ のラプラス変換で、tについて考えてみる。このままではラプラス変換できないので、まず $t^x$ と置く。次式
# 
# $\int_{0}^{\infty}t^{x}e^{\neg{st}}\cdot{dt}$
# $=\frac{1}{s^x}\int_{0}^{\infty}(st)^{x}\cdot{e}^{-st}\cdot{dt}$
# 
# を得る。
# ここで、st を τ に置き換えて積分することを考える。
# 
# $\tau=st$
# $\frac{d\tau}{dt}=s$
# 
# 上式を代入し、
# 
# $=\frac{1}{s^x}\int_{0}^{\infty}(st)^{x}\cdot{e}^{-st}\cdot{dt}\cdot\frac{d\tau}{dt}\cdot\frac{dt}{d\tau}$
# $=\frac{1}{s^x}\sum_{0}^{\infty}t^{x}\cdot{e^\tau}\cdot{d\tau}\cdot\frac{1}{s}$
# $=\frac{1}{s^{x+1}}\int_{0}^{\infty}\tau^{x}\cdot{e^{\neg\tau}}\cdot{dt}$
# 
# ここで$\int_{0}^{\infty}\tau^{x}\cdot{e^{\neg\tau}}\cdot{dt}$は定数として収束し、この式は一般にガンマ関数として知られる。
# ガンマ関数の無限乗積
# 
# $\Gamma(z)=\frac{1}{z}\prod_{\infty}^{n=1}(1+\frac{1}{n})^2(1+\frac{z}{n})^{-1}$
# 
# を二進指数の不定積分
# 
# $\int{2^x}dx=\frac{2^x}{\ln(2)}+\rm{Constant}$
# 
# の定数項であったと考えると、次式、
# 
# $\int{2^x}dx=\frac{2^x}{\ln(2)}+\Gamma(x+1)$
# 
# となる。
# つまり、次数と考えることのできた定数項の不定積分の正体はガンマ関数であり、1!, 2!, 3!... という無限級数からなる。
# 二進なので 1/2, 1/4, 1/8 だと思われたが、自然数に置き換え可能だったので、中間に可笑しな補正値が入っていたように感じた、ということになる。
# ここで、逆元の主値\omegaは、定数項cと
# $\prod_{\omega=a}^{\infty}\prod_{c=1}^{\infty}\frac{(a/\omega^2)!}{c!}=1+\frac{(a/2)!}{1!}+\frac{(a/4)!}{2!}+\frac{(a/8)!}{3!}+\frac{(a/16)!}{4!}\cdots\,(\omega\propto{c})$
# という累乗で見慣れた比例関係がある。
# 数式としてはこちらのほうが見やすいだろうか。
# $=1+\frac{a 1^{-1!}}{1!}+\frac{a 1^{-2!}}{2!}+\frac{a 1^{-3!}}{3!}+\frac{a 1^{-4!}}{4!}+\cdots$

# 参考サイト: http://okawa-denshi.jp/blog/?th=2009060800

# 実装例。逆元の主値を求めるについてsを考えると、仮説「定数項cは順序ある自然数である」は正しいとすれば、テイラー展開をそのまま導入できる。
module Math
  LOG2 = log(2)
  
# # 真数の逆元 (テイラー展開版 0 <= x < Infinity)
# # 畳み込み積分をタップ表示
# def exp2fr_b(fra)
#   a = fra * LOG2; b = 1.0; c = 1.0; s = 1.0;
# puts "exp2(#{fra})"
# puts "a = #{a}, c = 1!, 2!, 3!,..."
# puts "a/c!              | b                 s"
#   loop do
# printf("%15.15f | %15.15f ", a / c, b)
#     b = b * a / c;
# 
#     unless b > Float::EPSILON; puts; break; end
#     s = s + b;
#     c = c + 1
# printf("%15.15f", s)
# puts
#   end
# printf("sum exp2(%1.1f) = %15.15f\n", fra, s)
# end
# 
# # 真数の逆元 (定数項版)
# def exp2fr_c(fra)
#   if (fra < 0 || fra > 1) then return nil; end
#   a = Math.exp(fra * Math.log(2)); b = 1.0; s = 1.0
# puts "exp2(#{fra})"
# puts "a                 | b                  s"
#   loop do
#     b = 0.5 * b;
# printf("%15.15f | %15.15f  ", (b + s), b)
#     if a > b + s
#       s = s + b;
# printf("%15.15f", s)
#     end
# puts
#     unless b > Float::EPSILON then break; end
#   end
# printf("sum exp2(%1.1f) = %15.15f\n", fra, s)
# end
# 
# # 二進対数の仮数。Wirth先生の方法
# # 参考: Programming In Oberon's Tutorial
# # 1 <= fra < 2
# def log2fr(fra)
#   a = fra; b = 1.0; s = 0.0;
#   loop do
#     a = a * a;  b = 0.5 * b;
#     if a >= 2.0
#       s = s + b; a = a / 2;
#     end
#     unless b > Float::EPSILON then break; end
#   end
#   s
# end
# 
# # 畳み込み積分をタップ表示
# def log2fr_b(fra)
#   a = fra; b = 1.0; s = 0.0;
# puts "log2(#{fra})"
# puts "a                 | b                  s"
#   loop do
#     a = a * a;  b = 0.5 * b;
# printf("%15.15f | %15.15f  ", a, b)
#     if a >= 2.0
#       s = s + b; a = a / 2;
# printf("%15.15f", s)
#     end
# puts
#     unless b > Float::EPSILON then break; end
#   end
# printf("sum log2(%1.1f) = %15.15f\n", fra, s)
# end
# 
# # 定数項で見る
# def log2fr_c(fra)
#   if (fra < 1 || fra > 2) then return nil; end
#   a = Math.log2(fra); b = 1.0; s = 0.0;
# puts "log2(#{fra})"
# puts "a                 | b                  s"
#   loop do
#     b = 0.5 * b;
# printf("%15.15f | %15.15f  ", (b + s), b)
#     if a > b + s
#       s = s + b;
# printf("%15.15f", s)
#     end
# puts
#     unless b > Float::EPSILON then break; end
#   end
# printf("sum log2(%1.1f) = %15.15f\n", fra, s)
# end
  
  # 真数の逆元を畳み込み積分として得る。
  # tがln(2)なら2進指数、1なら自然指数を計算する
  def expxt(x, t)
    a = x * t; b = 1.0; c = 1.0; s = 1.0;
    loop do
      b = b * a / c;
      unless b > Float::EPSILON; break; end
      s = s + b;
      c = c + 1
    end
    s
  end
  
  # 二進指数。分解公式は積分(指数は逆元積分、対数は対数累乗積分)が周期性を持つことを利用する。
  def exp2(x)
    floorx = x.floor # 天井行列式の項目を参照。
    vfra = x - floorx # 指数と仮数を分解しておく。対数は二進で和積、指数は常用で乗積の違いがある
    vexp = 2 ** floorx # ldexp(1, floorx)の形でもよい。自前で整数乗を用意し、E ** floorxとすると自然指数の指数部になる
    if (vfra == 0.0) then return vexp.to_f; end  # 指数に床はないので仮数が0ならそのまま返す
    vexp * expxt(vfra, LOG2) # 返却値。変形合同式の項目を参照
  end
  
  protected :expxt
  module_function :exp2, :expxt
end

# Math.exp2(0.5)
# #=> 1.4142135623730951
